from math import sqrt
from scipy import stats
import numpy as np

# Задача 1. Известно, что генеральная совокупность распределена нормально
# со средним квадратическим отклонением, равным 16.
# Найти доверительный интервал для оценки математического ожидания с надежностью 0.95,
# если выборочная средняя M = 80, а объем выборки n = 256.
sigma = 16
Mx = 80
n = 256
p = 0.95
Z = 1.96
Min = Mx-Z*sigma/sqrt(n)
Max = Mx+Z*sigma/sqrt(n)
print(Min, Max) # 78.04 81.96
# Доверительный интервал (78.04; 81.96)



# Задача 2. В результате 10 независимых измерений некоторой величины X, выполненных с
# одинаковой точностью, получены опытные данные:
# 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
# Предполагая, что результаты измерений подчинены нормальному закону распределения
# вероятностей, оценить истинное значение величины X при помощи доверительного интервала,
# покрывающего это значение с доверительной вероятностью 0,95.
n = 10
values = np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
p = 0.95
M = values.mean()
sigma = values.std(ddof=1)
alpha = 1-p
t1 = stats.t.ppf(1-alpha/2, n-1)
Min = M-t1*sigma/sqrt(n)
Max = M+t1*sigma/sqrt(n)
print(Min, Max) # 6.267515851415713 6.912484148584288
# C 95% вероятностью доверительный интервал (6.268; 6.912) захватит истинное среднее значение X



# Задача 3. Рост дочерей 175, 167, 154, 174, 178, 148, 160, 167, 169, 170
# Рост матерей 178, 165, 165, 173, 168, 155, 160, 164, 178, 175
# Используя эти данные построить 95% доверительный интервал для разности среднего
# роста родителей и детей.
gr1 = np.array([175, 167, 154, 174, 178, 148, 160, 167, 169, 170])
gr2 = np.array([178, 165, 165, 173, 168, 155, 160, 164, 178, 175])
n = len(gr1)
p = 0.95
alpha = 1-p
M1 = gr1.mean()
M2 = gr2.mean()
delta = M1-M2
D1 = gr1.var(ddof=1)
D2 = gr2.var(ddof=1)
print(D1, D2) # 91.06666666666666 60.10000000000001
D = np.mean([D1, D2])
print('D', D) # D 75.58333333333334
SE = sqrt(D/n+D/n)
print('SE', SE) # SE 3.8880157750022915
t = stats.t.ppf(1-alpha/2, 2*(n-1))
print('t', t) # t 2.10092204024096
Min = delta-t*SE
Max = delta+t*SE
print(Min, Max) # -10.068418034506857 6.268418034506846
# Доверительный интервал (-10; 6.3)
