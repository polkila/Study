import numpy as np
from scipy import stats


# Задача 1 Даны значения величины заработной платы заемщиков банка (zp) и значения их
# поведенческого кредитного скоринга (ks):
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с
# помощью функции cov из numpy
# Полученные значения должны быть равны.
# Найдите коэффициент корреляции Пирсона с помощью ковариации и
# среднеквадратичных отклонений двух признаков,
# а затем с использованием функций из библиотек numpy и pandas.

zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

# a) Найдите ковариацию
Mxy = np.mean(zp*ks)
Mx = np.mean(zp)
My = np.mean(ks)
covA = Mxy - Mx*My
print('covA', covA) # covA 9157.839999999997

covB = np.cov(zp, ks, ddof=0)
print('covB', covB) # covB [[ 3494.64  9157.84] [ 9157.84 30468.89]]

# b) Найдите коэффициент корреляции Пирсона
s1 = np.std(zp, ddof=0)
s2 = np.std(ks, ddof=0)

kA = covA / (s1*s2)
print('kA', kA) # kA 0.8874900920739158

kB = np.corrcoef(zp, ks)
print('kB', kB) # kB [[1.         0.88749009] [0.88749009 1.        ]]



# Задача 2 Измерены значения IQ выборки студентов,
# обучающихся в местных технических вузах:
# 131, 125, 115, 122, 131, 115, 107, 99, 125, 111.
# Известно, что в генеральной совокупности IQ распределен нормально.
# Найдите доверительный интервал для математического ожидания с надежностью 0.95.
values = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])
n = len(values)
p = 0.95
Mx = values.mean()
sigma = values.std(ddof=1)
alpha = 1-p
t = stats.t.ppf(1-alpha/2, n-1)
Min = Mx-t*sigma/np.sqrt(n)
Max = Mx+t*sigma/np.sqrt(n)
print(Min, Max) # 110.55608365158724 125.64391634841274
# Доверительный интервал (110.56; 125.64)



# Задача 3 Известно, что рост футболистов в сборной распределен нормально
# с дисперсией генеральной совокупности, равной 25 кв.см. Объем выборки равен 27,
# среднее выборочное составляет 174.2. Найдите доверительный интервал для
# математического
# ожидания с надежностью 0.95.
Dx = 25
n = 27
Mx = 174.2
p = 0.95
Z = 1.96
sigma = np.sqrt(Dx)
Min = Mx-Z*sigma/np.sqrt(n)
Max = Mx+Z*sigma/np.sqrt(n)
print(Min, Max) # 172.31398912064722 176.08601087935276
# Доверительный интервал (172.31; 176.09)
